#ifndef VECTOR_HPP
#define VECTOR_HPP

#include <iostream>
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
#define	VECTOR_DEFAULT_CAPACITY 64

typedef unsigned long int count_t;
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
template <typename V> class Vector
{
protected:
	V* m_buffer;
	count_t m_counter;
	count_t m_capacity;

public:
	Vector(void)
	{
		m_capacity = VECTOR_DEFAULT_CAPACITY;
		m_counter = 0;
		m_buffer = new V[m_capacity];
	}
	virtual ~Vector(void)
	{
		delete [] m_buffer;
	}
	void AddElement(V element)
	{
		m_buffer[m_counter] = element;
		m_counter++;
	}
};
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

#endif